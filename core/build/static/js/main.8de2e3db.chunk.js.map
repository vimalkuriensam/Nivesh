{"version":3,"sources":["i18n/resources.js","i18n/config.js","history.js","App.js","serviceWorker.js","index.js"],"names":["nameSpaces","resources","en","translations","require","Home","About","MutualFund","HybridMF","DynamicAA","ArbitrageFund","Aggressive","Balanced","MultiAsset","Conservative","Debt","EquitySavings","MediumDuration","Overnight","LowDuration","DynamicBond","GiltFund10","LongDuration","ShortDuration","MoneyMarket","GiltFund","CorporateBonds","Floater","LiquidMutual","MediumtoLong","ultrashortterm","BankingPSU","creditrisk","Equity","Focused","Flexicap","Midcap","Multicap","Largecap","Smallcap","LargeMidCap","SectoralThermatic","valuefund","Elss","Dividend","Contra","RetirementFund","ChildrenFund","Indexfund","FOF","FixedDeposits","Mahindra","PNB","ICICI","BajajFinance","Shriram","HDFCLtd","PMS","P2P","RetirementPlan","Liquiloans","Faircent","SFC","ST","BLT","Partners","Motilal","HomeLoan","LAS","AskGroup","ICICIPrudential","TATA","Invesco","Gold","DigitalGold","GoldMutual","SGB","NPS","AIF","Bond","CorporateBond","RBIFloatingFund","NCD","Certification","CapitalGainBond","ARN","GrowMF","MutualFundDistributor","Testimonials","MetaTitle","MetaDescription","CTAFooter","hn","i18n","use","initReactI18next","init","fallbackLng","lng","ns","defaultNS","languages","createBrowserHistory","Navbar","React","lazy","Router","Footer","withTranslation","useState","setLanguage","changeLanguage","pathNames","window","location","pathname","split","localStorage","setItem","shift","join","className","fallback","Boolean","hostname","match","ReactDOM","render","history","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8de2e3db.chunk.js","sourcesContent":["export const nameSpaces = ['translations','Home'];\r\n\r\nconst en ={\r\n  translations: require('./locales/en/Translations.json'),\r\n  Home: require('./locales/en/Home.json'),\r\n  About: require('./locales/en/About.json'),\r\n  MutualFund: require('./locales/en/MutualFund.json'),\r\n  HybridMF: require('./locales/en/HybridMF.json'),\r\n  DynamicAA: require('./locales/en/DynamicAA.json'),\r\n  ArbitrageFund: require('./locales/en/ArbitrageFund.json'),\r\n  Aggressive: require('./locales/en/Aggressive.json'),\r\n  Balanced: require('./locales/en/Balanced.json'),\r\n  MultiAsset: require('./locales/en/MultiAsset.json'),\r\n  Conservative: require('./locales/en/Conservative.json'),\r\n  Debt: require('./locales/en/Debt.json'),\r\n  EquitySavings: require('./locales/en/EquitySavings.json'),\r\n  MediumDuration: require('./locales/en/MediumDuration.json'),\r\n  Overnight: require('./locales/en/Overnight.json'),\r\n  LowDuration: require('./locales/en/LowDuration.json'),\r\n  DynamicBond: require('./locales/en/DynamicBond.json'),\r\n  GiltFund10: require('./locales/en/GiltFund10.json'),\r\n  LongDuration: require('./locales/en/LongDuration.json'),\r\n  ShortDuration: require('./locales/en/ShortDuration.json'),\r\n  MoneyMarket: require('./locales/en/MoneyMarket.json'),\r\n  GiltFund: require('./locales/en/GiltFund.json'),\r\n  CorporateBonds: require('./locales/en/CorporateBonds.json'),\r\n  Floater: require('./locales/en/Floater.json'),\r\n  LiquidMutual: require('./locales/en/LiquidMutual.json'),\r\n  MediumtoLong: require('./locales/en/MediumtoLong.json'),\r\n  ultrashortterm: require('./locales/en/Ultrashortterm.json'),\r\n  BankingPSU: require('./locales/en/Bankingandpsu.json'),\r\n  creditrisk: require('./locales/en/Creditrisk.json'),\r\n  Equity: require('./locales/en/Equity.json'),\r\n  Focused: require('./locales/en/Focused.json'),\r\n  Flexicap: require('./locales/en/Flexicap.json'),\r\n  Midcap: require('./locales/en/Midcap.json'),\r\n  Multicap: require('./locales/en/Multicap.json'),\r\n  Largecap: require('./locales/en/Largecap.json'),\r\n  Smallcap: require('./locales/en/Smallcap.json'),\r\n  LargeMidCap: require('./locales/en/LargeMidCap.json'),\r\n  SectoralThermatic: require('./locales/en/SectoralThermatic.json'),\r\n  valuefund: require('./locales/en/Valuefund.json'),\r\n  Elss: require('./locales/en/Elss.json'),\r\n  Dividend: require('./locales/en/Dividend.json'),\r\n  Contra: require('./locales/en/Contra.json'),\r\n  RetirementFund: require('./locales/en/RetirementFund.json'),\r\n  ChildrenFund: require('./locales/en/ChildrenFund.json'),\r\n  Indexfund: require('./locales/en/Indexfund.json'),\r\n  FOF: require('./locales/en/FOF'),\r\n  FixedDeposits: require('./locales/en/FixedDeposits.json'),\r\n  Mahindra: require('./locales/en/Mahindra.json'),\r\n  PNB: require('./locales/en/PNB.json'),\r\n  ICICI: require('./locales/en/ICICI.json'),\r\n  BajajFinance: require('./locales/en/BajajFinance.json'),\r\n  Shriram: require('./locales/en/Shriram.json'),\r\n  HDFCLtd: require('./locales/en/HDFCLtd.json'),\r\n  PMS: require('./locales/en/PMS.json'),\r\n  P2P : require('./locales/en/P2P.json'),\r\n  RetirementPlan: require('./locales/en/RetirementPlan.json'),\r\n  Liquiloans: require('./locales/en/Liquiloans.json'),\r\n  Faircent: require('./locales/en/Faircent.json'),\r\n  SFC: require('./locales/en/SFC.json'),\r\n  ST: require('./locales/en/ST.json'),\r\n  BLT: require('./locales/en/BLT.json'),\r\n  Partners: require('./locales/en/Partners.json'),\r\n  Motilal: require('./locales/en/Motilal.json'),\r\n  HomeLoan: require('./locales/en/HomeLoan.json'),\r\n  LAS: require('./locales/en/LAS.json'),\r\n  AskGroup: require('./locales/en/AskGroup.json'),\r\n  ICICIPrudential: require('./locales/en/ICICIPrudential.json'),\r\n  TATA: require('./locales/en/TATA.json'),\r\n  Invesco: require('./locales/en/Invesco.json'),\r\n  Gold: require('./locales/en/Gold.json'),\r\n  DigitalGold: require('./locales/en/DigitalGold.json'),\r\n  GoldMutual: require('./locales/en/GoldMutual.json'),\r\n  SGB: require('./locales/en/SGB.json'),\r\n  NPS: require('./locales/en/NPS.json'),\r\n  AIF: require('./locales/en/AIF.json'),\r\n  Bond: require('./locales/en/Bond.json'),\r\n  CorporateBond: require('./locales/en/CorporateBond.json'),\r\n  RBIFloatingFund: require('./locales/en/RBIFloatingFund.json'),\r\n  NCD: require('./locales/en/NCD.json'),\r\n  Certification: require('./locales/en/Certification.json'),\r\n  CapitalGainBond: require('./locales/en/CapitalGainBond.json'),\r\n  ARN: require('./locales/en/ARN.json'),\r\n  GrowMF: require('./locales/en/GrowMF.json'),\r\n  MutualFundDistributor: require('./locales/en/MutualFundDistributor.json'),\r\n  Testimonials:require('./locales/en/Testimonials.json'),\r\n  MetaTitle: require('./locales/en/MetaTitle.json'),\r\n  MetaDescription: require('./locales/en/MetaDescription.json'),\r\n  CTAFooter: require('./locales/en/CTAFooter.json'),\r\n\r\n};\r\nconst hn= {\r\n  translations: require('./locales/hn/Translations.json'),\r\n  Home: require('./locales/hn/Home.json'),\r\n  About: require('./locales/hn/About.json'),\r\n  MutualFund: require('./locales/hn/MutualFund.json'),\r\n  HybridMF: require('./locales/hn/HybridMF.json'),\r\n  DynamicAA: require('./locales/hn/DynamicAA.json'),\r\n  ArbitrageFund: require('./locales/hn/ArbitrageFund.json'),\r\n  Aggressive: require('./locales/hn/Aggressive.json'),\r\n  Balanced: require('./locales/hn/Balanced.json'),\r\n  MultiAsset: require('./locales/hn/MultiAsset.json'),\r\n  Conservative: require('./locales/hn/Conservative.json'),\r\n  Debt: require('./locales/hn/Debt.json'),\r\n  EquitySavings: require('./locales/hn/EquitySavings.json'),\r\n  MediumDuration: require('./locales/hn/MediumDuration.json'),\r\n  Overnight: require('./locales/hn/Overnight.json'),\r\n  LowDuration: require('./locales/hn/LowDuration.json'),\r\n  DynamicBond: require('./locales/hn/DynamicBond.json'),\r\n  GiltFund10: require('./locales/hn/GiltFund10.json'),\r\n  LongDuration: require('./locales/hn/LongDuration.json'),\r\n  ShortDuration: require('./locales/hn/ShortDuration.json'),\r\n  MoneyMarket: require('./locales/hn/MoneyMarket.json'),\r\n  GiltFund: require('./locales/hn/GiltFund.json'),\r\n  CorporateBonds: require('./locales/hn/CorporateBonds.json'),\r\n  Floater: require('./locales/hn/Floater.json'),\r\n  LiquidMutual: require('./locales/hn/LiquidMutual.json'),\r\n  MediumtoLong: require('./locales/hn/MediumtoLong.json'),\r\n  ultrashortterm: require('./locales/hn/Ultrashortterm.json'),\r\n  BankingPSU: require('./locales/hn/Bankingandpsu.json'),\r\n  creditrisk: require('./locales/hn/Creditrisk.json'),\r\n  Equity: require('./locales/hn/Equity.json'),\r\n  Focused: require('./locales/hn/Focused.json'),\r\n  Flexicap: require('./locales/hn/Flexicap.json'),\r\n  Midcap: require('./locales/hn/Midcap.json'),\r\n  Largecap: require('./locales/hn/Largecap.json'),\r\n  Smallcap: require('./locales/hn/Smallcap.json'),\r\n  LargeMidCap: require('./locales/hn/LargeMidCap.json'),\r\n  SectoralThermatic: require('./locales/hn/SectoralThermatic.json'),\r\n  valuefund: require('./locales/hn/Valuefund.json'),\r\n  Elss: require('./locales/hn/Elss.json'),\r\n  Dividend: require('./locales/hn/Dividend.json'),\r\n  Contra: require('./locales/hn/Contra.json'),\r\n  RetirementFund: require('./locales/hn/RetirementFund.json'),\r\n  ChildrenFund: require('./locales/hn/ChildrenFund.json'),\r\n  Indexfund: require('./locales/hn/Indexfund.json'),\r\n  FOF: require('./locales/hn/FOF'),\r\n  FixedDeposits: require('./locales/hn/FixedDeposits.json'),\r\n  PNB: require('./locales/hn/PNB.json'),\r\n  Mahindra: require('./locales/hn/Mahindra.json'),\r\n  ICICI: require('./locales/hn/ICICI.json'),\r\n  BajajFinance: require('./locales/hn/BajajFinance.json'),\r\n  Shriram: require('./locales/hn/Shriram.json'),\r\n  HDFCLtd: require('./locales/hn/HDFCLtd.json'),\r\n  PMS: require('./locales/hn/PMS.json'),\r\n  P2P : require('./locales/hn/P2P.json'),\r\n  Liquiloans: require('./locales/hn/Liquiloans.json'),\r\n  Faircent: require('./locales/hn/Faircent.json'),\r\n  RetirementPlan: require('./locales/hn/RetirementPlan.json'),\r\n  SFC: require('./locales/hn/SFC.json'),\r\n  ST: require('./locales/hn/ST.json'),\r\n  BLT: require('./locales/hn/BLT.json'),\r\n  Partners: require('./locales/hn/Partners.json'),\r\n  Motilal: require('./locales/hn/Motilal.json'),\r\n  HomeLoan: require('./locales/hn/HomeLoan.json'),\r\n  LAS: require('./locales/hn/LAS.json'),\r\n  AskGroup: require('./locales/hn/AskGroup.json'),\r\n  ICICIPrudential: require('./locales/hn/ICICIPrudential.json'),\r\n  TATA: require('./locales/hn/TATA.json'),\r\n  Invesco: require('./locales/hn/Invesco.json'),\r\n  Gold: require('./locales/hn/Gold.json'),\r\n  DigitalGold: require('./locales/hn/DigitalGold.json'),\r\n  GoldMutual: require('./locales/hn/GoldMutual.json'),\r\n  SGB: require('./locales/hn/SGB.json'),\r\n  NPS: require('./locales/hn/NPS.json'),\r\n  AIF: require('./locales/hn/AIF.json'),\r\n  Bond: require('./locales/hn/Bond.json'),\r\n  CorporateBond: require('./locales/hn/CorporateBond.json'),\r\n  RBIFloatingFund: require('./locales/hn/RBIFloatingFund.json'),\r\n  NCD: require('./locales/hn/NCD.json'),\r\n  CapitalGainBond: require('./locales/hn/CapitalGainBond.json'),\r\n  Certification: require('./locales/hn/Certification.json'),\r\n  ARN: require('./locales/hn/ARN.json'),\r\n  GrowMF: require('./locales/hn/GrowMF.json'),\r\n  MutualFundDistributor: require('./locales/hn/MutualFundDistributor.json'),\r\n  Testimonials:require('./locales/hn/Testimonials.json'),\r\n  MetaTitle: require('./locales/hn/MetaTitle.json'),\r\n  MetaDescription: require('./locales/hn/MetaDescription.json'),\r\n  CTAFooter: require('./locales/hn/CTAFooter.json'),\r\n\r\n}\r\n\r\n export const resources = {en,hn}","import i18n from 'i18next';\r\nimport { initReactI18next } from 'react-i18next';\r\nimport {resources, nameSpaces } from \"./resources\";\r\ni18n.use(initReactI18next).init({\r\n  fallbackLng: 'en',\r\n  lng: 'en',\r\n  resources,\r\n  ns: nameSpaces,\r\n  defaultNS: nameSpaces[0]\r\n});\r\n\r\ni18n.languages = ['en', 'hn'];\r\n\r\nexport default i18n;","import { createBrowserHistory } from \"history\";\r\n\r\nexport default createBrowserHistory();\r\n","import React, {Suspense} from \"react\";\r\nimport { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport i18n from \"./i18n/config\";\r\nimport { withTranslation } from 'react-i18next';\r\n\r\nconst Navbar = React.lazy(()=>import(\"./Component/Navbar/Navbar\"));\r\nconst Router = React.lazy(()=>import(\"./router\"));\r\nconst Footer = React.lazy(()=>import(\"./Component/Footer/Footer\"));\r\n\r\nfunction App () {\r\n\r\n  const [language, setLanguage] = useState('en');\r\n  const changeLanguage = (lng) => {\r\n    //const loc = window.location;\r\n    const pathNames = window.location.pathname.split(\"/\");\r\n    i18n.changeLanguage(lng,() => {\r\n      localStorage.setItem('niveshLanguage', lng);\r\n      setLanguage(lng);\r\n      if (pathNames[1] !== lng) {\r\n        pathNames[1] = lng;\r\n        pathNames.shift();\r\n        //const redirectUrl = `${loc.origin}/${pathNames.join(\"/\")}${loc.search}`;\r\n        window.location.pathname = `${pathNames.join(\"/\")}`;\r\n      };\r\n\r\n    });\r\n  }\r\n\r\n    return (\r\n      <div className=\"landscape\" >\r\n        <div className=\"App\">\r\n        <Suspense fallback={<div>Loading....</div>}><Navbar changeLanguage={changeLanguage}/></Suspense>\r\n          <Suspense fallback={<div>Loading....</div>}><Router changeLanguage={changeLanguage}/></Suspense>\r\n          <Suspense fallback={<div>Loading....</div>}><Footer /></Suspense>\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default withTranslation()(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import 'react-app-polyfill/ie11';\r\nimport 'react-app-polyfill/stable';\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { Router } from \"react-router-dom\";\r\nimport history from \"./history\";\r\nimport './i18n/config';\r\n\r\nReactDOM.render(\r\n  <Router history={history}>\r\n    <App />\r\n  </Router>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}